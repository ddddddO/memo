package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Tag represents a row from 'public.tags'.
type Tag struct {
	ID      int           `json:"id"`       // id
	Name    string        `json:"name"`     // name
	UsersID sql.NullInt64 `json:"users_id"` // users_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Tag exists in the database.
func (t *Tag) Exists() bool {
	return t._exists
}

// Deleted returns true when the Tag has been marked for deletion from
// the database.
func (t *Tag) Deleted() bool {
	return t._deleted
}

// Insert inserts the Tag to the database.
func (t *Tag) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.tags (` +
		`id, name, users_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`
	// run
	logf(sqlstr, t.ID, t.Name, t.UsersID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.Name, t.UsersID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a Tag in the database.
func (t *Tag) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.tags SET ` +
		`name = $1, users_id = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, t.Name, t.UsersID, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.Name, t.UsersID, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Tag to the database.
func (t *Tag) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for Tag.
func (t *Tag) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.tags (` +
		`id, name, users_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, users_id = EXCLUDED.users_id `
	// run
	logf(sqlstr, t.ID, t.Name, t.UsersID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.Name, t.UsersID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the Tag from the database.
func (t *Tag) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.tags ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TagByID retrieves a row from 'public.tags' as a Tag.
//
// Generated from index 'tags_pkey'.
func TagByID(ctx context.Context, db DB, id int) (*Tag, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, users_id ` +
		`FROM public.tags ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	t := Tag{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.Name, &t.UsersID); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// TagsByUsersID retrieves a row from 'public.tags' as a Tag.
//
// Generated from index 'tags_users_id_idx'.
func TagsByUsersID(ctx context.Context, db DB, usersID sql.NullInt64) ([]*Tag, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, users_id ` +
		`FROM public.tags ` +
		`WHERE users_id = $1`
	// run
	logf(sqlstr, usersID)
	rows, err := db.QueryContext(ctx, sqlstr, usersID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Tag
	for rows.Next() {
		t := Tag{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&t.ID, &t.Name, &t.UsersID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &t)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// User returns the User associated with the Tag's (UsersID).
//
// Generated from foreign key 'tags_users_id_fkey'.
func (t *Tag) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, int(t.UsersID.Int64))
}
