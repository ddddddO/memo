package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// HTTPSession represents a row from 'public.http_sessions'.
type HTTPSession struct {
	ID         int64        `json:"id"`          // id
	Key        []byte       `json:"key"`         // key
	Data       []byte       `json:"data"`        // data
	CreatedOn  sql.NullTime `json:"created_on"`  // created_on
	ModifiedOn sql.NullTime `json:"modified_on"` // modified_on
	ExpiresOn  sql.NullTime `json:"expires_on"`  // expires_on
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the HTTPSession exists in the database.
func (he *HTTPSession) Exists() bool {
	return he._exists
}

// Deleted returns true when the HTTPSession has been marked for deletion from
// the database.
func (he *HTTPSession) Deleted() bool {
	return he._deleted
}

// Insert inserts the HTTPSession to the database.
func (he *HTTPSession) Insert(ctx context.Context, db DB) error {
	switch {
	case he._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case he._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.http_sessions (` +
		`key, data, created_on, modified_on, expires_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, he.Key, he.Data, he.CreatedOn, he.ModifiedOn, he.ExpiresOn)
	if err := db.QueryRowContext(ctx, sqlstr, he.Key, he.Data, he.CreatedOn, he.ModifiedOn, he.ExpiresOn).Scan(&he.ID); err != nil {
		return logerror(err)
	}
	// set exists
	he._exists = true
	return nil
}

// Update updates a HTTPSession in the database.
func (he *HTTPSession) Update(ctx context.Context, db DB) error {
	switch {
	case !he._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case he._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.http_sessions SET ` +
		`key = $1, data = $2, created_on = $3, modified_on = $4, expires_on = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, he.Key, he.Data, he.CreatedOn, he.ModifiedOn, he.ExpiresOn, he.ID)
	if _, err := db.ExecContext(ctx, sqlstr, he.Key, he.Data, he.CreatedOn, he.ModifiedOn, he.ExpiresOn, he.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the HTTPSession to the database.
func (he *HTTPSession) Save(ctx context.Context, db DB) error {
	if he.Exists() {
		return he.Update(ctx, db)
	}
	return he.Insert(ctx, db)
}

// Upsert performs an upsert for HTTPSession.
func (he *HTTPSession) Upsert(ctx context.Context, db DB) error {
	switch {
	case he._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.http_sessions (` +
		`id, key, data, created_on, modified_on, expires_on` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`key = EXCLUDED.key, data = EXCLUDED.data, created_on = EXCLUDED.created_on, modified_on = EXCLUDED.modified_on, expires_on = EXCLUDED.expires_on `
	// run
	logf(sqlstr, he.ID, he.Key, he.Data, he.CreatedOn, he.ModifiedOn, he.ExpiresOn)
	if _, err := db.ExecContext(ctx, sqlstr, he.ID, he.Key, he.Data, he.CreatedOn, he.ModifiedOn, he.ExpiresOn); err != nil {
		return logerror(err)
	}
	// set exists
	he._exists = true
	return nil
}

// Delete deletes the HTTPSession from the database.
func (he *HTTPSession) Delete(ctx context.Context, db DB) error {
	switch {
	case !he._exists: // doesn't exist
		return nil
	case he._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.http_sessions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, he.ID)
	if _, err := db.ExecContext(ctx, sqlstr, he.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	he._deleted = true
	return nil
}

// HTTPSessionByID retrieves a row from 'public.http_sessions' as a HTTPSession.
//
// Generated from index 'http_sessions_pkey'.
func HTTPSessionByID(ctx context.Context, db DB, id int64) (*HTTPSession, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, key, data, created_on, modified_on, expires_on ` +
		`FROM public.http_sessions ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	he := HTTPSession{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&he.ID, &he.Key, &he.Data, &he.CreatedOn, &he.ModifiedOn, &he.ExpiresOn); err != nil {
		return nil, logerror(err)
	}
	return &he, nil
}
